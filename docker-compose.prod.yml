version: '3.8'

services:
  # База данных PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: dresscutur_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Redis для кеширования
  redis:
    image: redis:7-alpine
    container_name: dresscutur_redis_prod
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Next.js приложение
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dresscutur_app_prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=require"
      REDIS_URL: "redis://:${REDIS_PASSWORD}@redis:6379"
      NODE_ENV: production
      NEXTAUTH_URL: "${NEXTAUTH_URL}"
      NEXTAUTH_SECRET: "${NEXTAUTH_SECRET}"
      ADMIN_SESSION_SECRET: "${ADMIN_SESSION_SECRET}"
    volumes:
      - uploads_data:/app/public/uploads
    restart: always
    networks:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
      replicas: 2

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: dresscutur_nginx_prod
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - uploads_data:/usr/share/nginx/html/uploads
      - ./logs/nginx:/var/log/nginx
    restart: always
    networks:
      - frontend
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Backup сервис
  backup:
    image: postgres:15-alpine
    container_name: dresscutur_backup
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    command: /bin/sh -c "chmod +x /backup.sh && crond -f -l 2"
    restart: always
    networks:
      - backend

  # Monitoring
  watchtower:
    image: containrrr/watchtower
    container_name: dresscutur_watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /root/.docker/config.json:/config.json
    command: --interval 300 --cleanup
    restart: always

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true 