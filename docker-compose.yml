version: '3.8'

services:
  # База данных PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: dresscutur_postgres
    environment:
      POSTGRES_DB: dresscutur
      POSTGRES_USER: dresscutur
      POSTGRES_PASSWORD: dresscutur_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dresscutur"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis для кеширования
  redis:
    image: redis:7-alpine
    container_name: dresscutur_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Next.js приложение
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dresscutur_app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: "postgresql://dresscutur:dresscutur_password@postgres:5432/dresscutur"
      REDIS_URL: "redis://redis:6379"
      NODE_ENV: development
      NEXTAUTH_URL: "http://localhost:3000"
      NEXTAUTH_SECRET: "development_secret_key"
    ports:
      - "3000:3000"
    volumes:
      - uploads_data:/app/public/uploads
      - ./prisma:/app/prisma
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx для проксирования (опционально)
  nginx:
    image: nginx:alpine
    container_name: dresscutur_nginx
    depends_on:
      - app
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - uploads_data:/usr/share/nginx/html/uploads
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  uploads_data:

networks:
  default:
    name: dresscutur_network 