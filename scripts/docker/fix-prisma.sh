#!/bin/bash
set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å Prisma${NC}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL
check_url() {
    local url=$1
    echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: $url${NC}"
    
    if curl -s --head --fail "$url" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω${NC}"
        return 0
    else
        echo -e "${RED}‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è .env —Ñ–∞–π–ª–∞ –¥–ª—è Docker
create_docker_env() {
    echo -e "${BLUE}üìù –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –¥–ª—è Docker —Å–±–æ—Ä–∫–∏${NC}"
    
    cat > .env.docker << EOF
# Prisma configuration for Docker build
PRISMA_ENGINES_CHECKSUM_IGNORE_MISSING=1
PRISMA_SKIP_POSTINSTALL_GENERATE=1
PRISMA_CLI_BINARY_TARGETS=linux-musl-openssl-3.0.x
PRISMA_ENGINES_MIRROR=https://github.com/prisma/prisma-engines/releases/download/

# Build configuration
NODE_ENV=production
NEXT_TELEMETRY_DISABLED=1
EOF
    
    echo -e "${GREEN}‚úÖ –§–∞–π–ª .env.docker —Å–æ–∑–¥–∞–Ω${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã
try_build_approaches() {
    echo -e "${BLUE}üîÑ –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ —Å–±–æ—Ä–∫–µ${NC}"
    
    # –ü–æ–¥—Ö–æ–¥ 1: –û—Å–Ω–æ–≤–Ω–æ–π Dockerfile —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    echo -e "${YELLOW}üì¶ –ü–æ–¥—Ö–æ–¥ 1: –û—Å–Ω–æ–≤–Ω–æ–π Dockerfile —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è${NC}"
    if docker build \
        --platform linux/amd64 \
        --build-arg NODE_ENV=production \
        --build-arg NEXT_TELEMETRY_DISABLED=1 \
        --build-arg PRISMA_ENGINES_CHECKSUM_IGNORE_MISSING=1 \
        --build-arg PRISMA_SKIP_POSTINSTALL_GENERATE=1 \
        --network=host \
        -t dresscutur:test-approach-1 \
        -f Dockerfile \
        . 2>&1 | tee build-approach-1.log; then
        echo -e "${GREEN}‚úÖ –ü–æ–¥—Ö–æ–¥ 1 —É—Å–ø–µ—à–µ–Ω!${NC}"
        return 0
    fi
    
    # –ü–æ–¥—Ö–æ–¥ 2: Offline Dockerfile
    echo -e "${YELLOW}üì¶ –ü–æ–¥—Ö–æ–¥ 2: Offline Dockerfile${NC}"
    if docker build \
        --platform linux/amd64 \
        --network=host \
        -t dresscutur:test-approach-2 \
        -f Dockerfile.offline \
        . 2>&1 | tee build-approach-2.log; then
        echo -e "${GREEN}‚úÖ –ü–æ–¥—Ö–æ–¥ 2 —É—Å–ø–µ—à–µ–Ω!${NC}"
        return 0
    fi
    
    # –ü–æ–¥—Ö–æ–¥ 3: –ë–µ–∑ Alpine (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Node.js)
    echo -e "${YELLOW}üì¶ –ü–æ–¥—Ö–æ–¥ 3: –°–æ–∑–¥–∞–µ–º Dockerfile –±–µ–∑ Alpine${NC}"
    create_debian_dockerfile
    if docker build \
        --platform linux/amd64 \
        --build-arg PRISMA_ENGINES_CHECKSUM_IGNORE_MISSING=1 \
        --network=host \
        -t dresscutur:test-approach-3 \
        -f Dockerfile.debian \
        . 2>&1 | tee build-approach-3.log; then
        echo -e "${GREEN}‚úÖ –ü–æ–¥—Ö–æ–¥ 3 —É—Å–ø–µ—à–µ–Ω!${NC}"
        return 0
    fi
    
    echo -e "${RED}‚ùå –í—Å–µ –ø–æ–¥—Ö–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏${NC}"
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Dockerfile –Ω–∞ –æ—Å–Ω–æ–≤–µ Debian
create_debian_dockerfile() {
    cat > Dockerfile.debian << 'EOF'
FROM node:18-slim AS base

FROM base AS deps
RUN apt-get update && apt-get install -y openssl ca-certificates && rm -rf /var/lib/apt/lists/*
WORKDIR /app

COPY package.json package-lock.json* ./
ENV PRISMA_SKIP_POSTINSTALL_GENERATE=1
RUN npm ci

FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

ENV PRISMA_ENGINES_CHECKSUM_IGNORE_MISSING=1
ENV PRISMA_SKIP_POSTINSTALL_GENERATE=1
ENV PRISMA_CLI_BINARY_TARGETS=linux-openssl-3.0.x

RUN npx prisma generate
ENV NEXT_TELEMETRY_DISABLED=1
RUN npm run build

FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

RUN apt-get update && apt-get install -y openssl curl && rm -rf /var/lib/apt/lists/*
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public
RUN mkdir .next
RUN chown nextjs:nodejs .next

COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/.prisma ./node_modules/.prisma

RUN mkdir -p public/uploads && chown nextjs:nodejs public/uploads

USER nextjs
EXPOSE 3000
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

CMD ["node", "server.js"]
EOF
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏
diagnose_network() {
    echo -e "${BLUE}üåê –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ URL Prisma
    local urls=(
        "https://binaries.prisma.sh"
        "https://github.com/prisma/prisma-engines"
        "https://registry.npmjs.org/prisma"
        "https://registry.npmjs.org/@prisma/client"
    )
    
    for url in "${urls[@]}"; do
        check_url "$url"
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS
    echo -e "${YELLOW}üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS —Ä–µ–∑–æ–ª—é—Ü–∏—é${NC}"
    if nslookup binaries.prisma.sh >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ DNS —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    else
        echo -e "${RED}‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å DNS${NC}"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP_PROXY –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if [[ -n "$HTTP_PROXY" || -n "$HTTPS_PROXY" ]]; then
        echo -e "${YELLOW}üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã proxy –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:${NC}"
        echo "HTTP_PROXY: $HTTP_PROXY"
        echo "HTTPS_PROXY: $HTTPS_PROXY"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π
show_solutions() {
    echo -e "${BLUE}üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:${NC}"
    echo
    echo -e "${YELLOW}1. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:${NC}"
    echo "   export PRISMA_ENGINES_CHECKSUM_IGNORE_MISSING=1"
    echo "   export PRISMA_SKIP_POSTINSTALL_GENERATE=1"
    echo
    echo -e "${YELLOW}2. –°–±–æ—Ä–∫–∞ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º Dockerfile:${NC}"
    echo "   ./scripts/docker/build.sh v1.0.0 Dockerfile.offline"
    echo
    echo -e "${YELLOW}3. –°–±–æ—Ä–∫–∞ —Å Debian –≤–º–µ—Å—Ç–æ Alpine:${NC}"
    echo "   ./scripts/docker/build.sh v1.0.0 Dockerfile.debian"
    echo
    echo -e "${YELLOW}4. –õ–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma:${NC}"
    echo "   npm run prisma:generate"
    echo "   docker build --no-cache ..."
    echo
    echo -e "${YELLOW}5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ proxy:${NC}"
    echo "   export HTTP_PROXY=http://proxy.company.com:8080"
    echo "   export HTTPS_PROXY=http://proxy.company.com:8080"
    echo
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${GREEN}üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–æ–±–ª–µ–º —Å Prisma${NC}"
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏
    diagnose_network
    
    # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –¥–ª—è Docker
    create_docker_env
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏—è
    show_solutions
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—Ç–∏–º –ª–∏ –º—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å
    read -p "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        try_build_approaches
    fi
    
    echo -e "${GREEN}‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞${NC}"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "${1:-main}" in
    "diagnose")
        diagnose_network
        ;;
    "fix")
        try_build_approaches
        ;;
    "solutions")
        show_solutions
        ;;
    *)
        main
        ;;
esac 